package trikita.anvil.v15;

import android.animation.LayoutTransition;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.app.FragmentBreadCrumbs;
import android.app.FragmentManager;
import android.app.LocalActivityManager;
import android.app.SearchableInfo;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.gesture.Gesture;
import android.gesture.GestureOverlayView;
import android.graphics.Bitmap;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.inputmethodservice.ExtractEditText;
import android.inputmethodservice.Keyboard;
import android.inputmethodservice.KeyboardView;
import android.media.MediaPlayer;
import android.net.Uri;
import android.net.http.SslCertificate;
import android.opengl.GLSurfaceView;
import android.text.Editable;
import android.text.InputFilter;
import android.text.Spannable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.method.KeyListener;
import android.text.method.MovementMethod;
import android.text.method.TransformationMethod;
import android.view.ActionMode;
import android.view.ContextMenu;
import android.view.DragEvent;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.TouchDelegate;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.view.animation.Animation;
import android.view.animation.Interpolator;
import android.view.animation.LayoutAnimationController;
import android.view.inputmethod.ExtractedText;
import android.webkit.DownloadListener;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AbsListView;
import android.widget.AbsSeekBar;
import android.widget.AbsSpinner;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.AdapterViewAnimator;
import android.widget.AdapterViewFlipper;
import android.widget.AutoCompleteTextView;
import android.widget.CalendarView;
import android.widget.CheckedTextView;
import android.widget.Chronometer;
import android.widget.CompoundButton;
import android.widget.CursorAdapter;
import android.widget.DatePicker;
import android.widget.DialerFilter;
import android.widget.EditText;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.FrameLayout;
import android.widget.Gallery;
import android.widget.GridLayout;
import android.widget.GridView;
import android.widget.HorizontalScrollView;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.MediaController;
import android.widget.MultiAutoCompleteTextView;
import android.widget.NumberPicker;
import android.widget.ProgressBar;
import android.widget.QuickContactBadge;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Scroller;
import android.widget.SearchView;
import android.widget.SeekBar;
import android.widget.SlidingDrawer;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.Switch;
import android.widget.TabHost;
import android.widget.TabWidget;
import android.widget.TableLayout;
import android.widget.TextSwitcher;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.ToggleButton;
import android.widget.VideoView;
import android.widget.ViewAnimator;
import android.widget.ViewFlipper;
import android.widget.ViewSwitcher;
import android.widget.ZoomButton;
import android.widget.ZoomControls;
import java.lang.Boolean;
import java.lang.CharSequence;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import trikita.anvil.Anvil;
import trikita.anvil.BaseAttrs;

/**
 * Factory methods to modify view attributes.
 * This file was generated by {@code gradle generateAttrs}
 */
public class Attrs extends BaseAttrs {
  public static Anvil.AttrNode accessibilityDelegate(final View.AccessibilityDelegate arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setAccessibilityDelegate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode activated(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setActivated(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode activity(final Activity arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof FragmentBreadCrumbs) {
          ((FragmentBreadCrumbs) v).setActivity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode adapter(final Adapter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewFlipper) {
          ((AdapterViewFlipper) v).setAdapter(arg);
        }
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setAdapter(arg);
        }
        if (v instanceof AdapterView) {
          ((AdapterView) v).setAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode adapter(final ListAdapter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setAdapter(arg);
        }
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setAdapter(arg);
        }
        if (v instanceof GridView) {
          ((GridView) v).setAdapter(arg);
        }
        if (v instanceof AbsListView) {
          ((AbsListView) v).setAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode adapter(final SpinnerAdapter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsSpinner) {
          ((AbsSpinner) v).setAdapter(arg);
        }
        if (v instanceof Spinner) {
          ((Spinner) v).setAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode adapter(final ExpandableListAdapter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode addStatesFromChildren(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setAddStatesFromChildren(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode adjustViewBounds(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setAdjustViewBounds(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode alignmentMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setAlignmentMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode allCaps(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setAllCaps(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode alpha(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setAlpha(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode alpha(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setAlpha(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode alwaysDrawnWithCacheEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setAlwaysDrawnWithCacheEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode anchorView(final View arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof MediaController) {
          ((MediaController) v).setAnchorView(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode animateFirstView(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setAnimateFirstView(arg);
        }
        if (v instanceof ViewAnimator) {
          ((ViewAnimator) v).setAnimateFirstView(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode animation(final Animation arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode animationCacheEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setAnimationCacheEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode animationDuration(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Gallery) {
          ((Gallery) v).setAnimationDuration(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode autoLinkMask(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setAutoLinkMask(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode autoStart(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewFlipper) {
          ((AdapterViewFlipper) v).setAutoStart(arg);
        }
        if (v instanceof ViewFlipper) {
          ((ViewFlipper) v).setAutoStart(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode backgroundColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setBackgroundColor(arg);
        }
        if (v instanceof WebView) {
          ((WebView) v).setBackgroundColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode backgroundDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ToggleButton) {
          ((ToggleButton) v).setBackgroundDrawable(arg);
        }
        if (v instanceof View) {
          ((View) v).setBackgroundDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode backgroundResource(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setBackgroundResource(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode base(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Chronometer) {
          ((Chronometer) v).setBase(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode baseline(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setBaseline(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode baselineAlignBottom(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setBaselineAlignBottom(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode baselineAligned(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setBaselineAligned(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode baselineAlignedChildIndex(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setBaselineAlignedChildIndex(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode bottom(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setBottom(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode buttonDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CompoundButton) {
          ((CompoundButton) v).setButtonDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode buttonDrawable(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CompoundButton) {
          ((CompoundButton) v).setButtonDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode cacheColorHint(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setCacheColorHint(arg);
        }
        if (v instanceof AbsListView) {
          ((AbsListView) v).setCacheColorHint(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode calendarViewShown(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DatePicker) {
          ((DatePicker) v).setCalendarViewShown(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode callbackDuringFling(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Gallery) {
          ((Gallery) v).setCallbackDuringFling(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode cameraDistance(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setCameraDistance(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode certificate(final SslCertificate arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setCertificate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode checkMarkDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CheckedTextView) {
          ((CheckedTextView) v).setCheckMarkDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode checkMarkDrawable(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CheckedTextView) {
          ((CheckedTextView) v).setCheckMarkDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode checked(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Switch) {
          ((Switch) v).setChecked(arg);
        }
        if (v instanceof CheckedTextView) {
          ((CheckedTextView) v).setChecked(arg);
        }
        if (v instanceof ToggleButton) {
          ((ToggleButton) v).setChecked(arg);
        }
        if (v instanceof CompoundButton) {
          ((CompoundButton) v).setChecked(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode childDivider(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setChildDivider(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode childIndicator(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setChildIndicator(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode choiceMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setChoiceMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode clickable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setClickable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode clipChildren(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setClipChildren(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode clipToPadding(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setClipToPadding(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode colorFilter(final ColorFilter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setColorFilter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode colorFilter(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setColorFilter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode columnCount(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setColumnCount(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode columnOrderPreserved(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setColumnOrderPreserved(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode columnWidth(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridView) {
          ((GridView) v).setColumnWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode completionHint(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setCompletionHint(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode compoundDrawablePadding(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setCompoundDrawablePadding(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode contentDescription(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setContentDescription(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode currentHour(final Integer arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TimePicker) {
          ((TimePicker) v).setCurrentHour(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode currentMinute(final Integer arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TimePicker) {
          ((TimePicker) v).setCurrentMinute(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode currentTab(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setCurrentTab(arg);
        }
        if (v instanceof TabHost) {
          ((TabHost) v).setCurrentTab(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode currentTabByTag(final String arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabHost) {
          ((TabHost) v).setCurrentTabByTag(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode currentText(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextSwitcher) {
          ((TextSwitcher) v).setCurrentText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode cursorVisible(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setCursorVisible(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode customSelectionActionModeCallback(final ActionMode.Callback arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setCustomSelectionActionModeCallback(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode date(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CalendarView) {
          ((CalendarView) v).setDate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode debugFlags(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setDebugFlags(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode descendantFocusability(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setDescendantFocusability(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode digitsWatcher(final TextWatcher arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DialerFilter) {
          ((DialerFilter) v).setDigitsWatcher(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode displayedChild(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setDisplayedChild(arg);
        }
        if (v instanceof ViewAnimator) {
          ((ViewAnimator) v).setDisplayedChild(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode displayedValues(final String[] arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setDisplayedValues(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode divider(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setDivider(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dividerDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setDividerDrawable(arg);
        }
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setDividerDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dividerDrawable(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setDividerDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dividerHeight(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setDividerHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dividerPadding(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setDividerPadding(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode downloadListener(final DownloadListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setDownloadListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode drawSelectorOnTop(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setDrawSelectorOnTop(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode drawingCacheBackgroundColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setDrawingCacheBackgroundColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode drawingCacheEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setDrawingCacheEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode drawingCacheQuality(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setDrawingCacheQuality(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownAnchor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownAnchor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownBackgroundDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownBackgroundDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownBackgroundResource(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownBackgroundResource(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownHeight(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownHorizontalOffset(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownHorizontalOffset(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownVerticalOffset(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownVerticalOffset(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode dropDownWidth(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setDropDownWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode duplicateParentStateEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setDuplicateParentStateEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eGLConfigChooser(final GLSurfaceView.EGLConfigChooser arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setEGLConfigChooser(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eGLConfigChooser(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setEGLConfigChooser(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eGLContextClientVersion(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setEGLContextClientVersion(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eGLContextFactory(final GLSurfaceView.EGLContextFactory arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setEGLContextFactory(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eGLWindowSurfaceFactory(final GLSurfaceView.EGLWindowSurfaceFactory arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setEGLWindowSurfaceFactory(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode editableFactory(final Editable.Factory arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setEditableFactory(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode ellipsize(final TextUtils.TruncateAt arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setEllipsize(arg);
        }
        if (v instanceof EditText) {
          ((EditText) v).setEllipsize(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode emptyView(final View arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterView) {
          ((AdapterView) v).setEmptyView(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode ems(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setEms(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode enabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setEnabled(arg);
        }
        if (v instanceof ZoomButton) {
          ((ZoomButton) v).setEnabled(arg);
        }
        if (v instanceof TimePicker) {
          ((TimePicker) v).setEnabled(arg);
        }
        if (v instanceof Spinner) {
          ((Spinner) v).setEnabled(arg);
        }
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setEnabled(arg);
        }
        if (v instanceof CalendarView) {
          ((CalendarView) v).setEnabled(arg);
        }
        if (v instanceof TabWidget) {
          ((TabWidget) v).setEnabled(arg);
        }
        if (v instanceof MediaController) {
          ((MediaController) v).setEnabled(arg);
        }
        if (v instanceof DatePicker) {
          ((DatePicker) v).setEnabled(arg);
        }
        if (v instanceof View) {
          ((View) v).setEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode error(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setError(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode eventsInterceptionEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setEventsInterceptionEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode excludeMimes(final String[] arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof QuickContactBadge) {
          ((QuickContactBadge) v).setExcludeMimes(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode extractedText(final ExtractedText arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setExtractedText(arg);
        }
        if (v instanceof ExtractEditText) {
          ((ExtractEditText) v).setExtractedText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode factory(final ViewSwitcher.ViewFactory arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewSwitcher) {
          ((ViewSwitcher) v).setFactory(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fadeEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setFadeEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fadeOffset(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setFadeOffset(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fadingEdgeLength(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setFadingEdgeLength(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fastScrollAlwaysVisible(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setFastScrollAlwaysVisible(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fastScrollEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setFastScrollEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fillViewport(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof HorizontalScrollView) {
          ((HorizontalScrollView) v).setFillViewport(arg);
        }
        if (v instanceof ScrollView) {
          ((ScrollView) v).setFillViewport(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode filterText(final String arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setFilterText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode filterTouchesWhenObscured(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setFilterTouchesWhenObscured(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode filterWatcher(final TextWatcher arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DialerFilter) {
          ((DialerFilter) v).setFilterWatcher(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode filters(final InputFilter[] arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setFilters(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode firstDayOfWeek(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CalendarView) {
          ((CalendarView) v).setFirstDayOfWeek(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode fitsSystemWindows(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setFitsSystemWindows(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode flipInterval(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewFlipper) {
          ((AdapterViewFlipper) v).setFlipInterval(arg);
        }
        if (v instanceof ViewFlipper) {
          ((ViewFlipper) v).setFlipInterval(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode focusable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterView) {
          ((AdapterView) v).setFocusable(arg);
        }
        if (v instanceof View) {
          ((View) v).setFocusable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode focusableInTouchMode(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterView) {
          ((AdapterView) v).setFocusableInTouchMode(arg);
        }
        if (v instanceof View) {
          ((View) v).setFocusableInTouchMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode footerDividersEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setFooterDividersEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode foreground(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof FrameLayout) {
          ((FrameLayout) v).setForeground(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode foregroundGravity(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof FrameLayout) {
          ((FrameLayout) v).setForegroundGravity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode format(final String arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Chronometer) {
          ((Chronometer) v).setFormat(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode formatter(final NumberPicker.Formatter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setFormatter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode freezesText(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setFreezesText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode friction(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setFriction(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gLWrapper(final GLSurfaceView.GLWrapper arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setGLWrapper(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gesture(final Gesture arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGesture(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureStrokeAngleThreshold(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureStrokeAngleThreshold(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureStrokeLengthThreshold(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureStrokeLengthThreshold(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureStrokeSquarenessTreshold(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureStrokeSquarenessTreshold(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureStrokeType(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureStrokeType(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureStrokeWidth(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureStrokeWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gestureVisible(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setGestureVisible(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode gravity(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setGravity(arg);
        }
        if (v instanceof Gallery) {
          ((Gallery) v).setGravity(arg);
        }
        if (v instanceof Spinner) {
          ((Spinner) v).setGravity(arg);
        }
        if (v instanceof RelativeLayout) {
          ((RelativeLayout) v).setGravity(arg);
        }
        if (v instanceof GridView) {
          ((GridView) v).setGravity(arg);
        }
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setGravity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode groupIndicator(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setGroupIndicator(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hapticFeedbackEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setHapticFeedbackEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode headerDividersEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setHeaderDividersEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode height(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode highlightColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHighlightColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hint(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHint(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hint(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHint(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hintTextColor(final ColorStateList arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHintTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hintTextColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHintTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontalFadingEdgeEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setHorizontalFadingEdgeEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontalGravity(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RelativeLayout) {
          ((RelativeLayout) v).setHorizontalGravity(arg);
        }
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setHorizontalGravity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontalScrollBarEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setHorizontalScrollBarEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontalScrollbarOverlay(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setHorizontalScrollbarOverlay(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontalSpacing(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridView) {
          ((GridView) v).setHorizontalSpacing(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode horizontallyScrolling(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setHorizontallyScrolling(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode hovered(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setHovered(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode iconified(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setIconified(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode iconifiedByDefault(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setIconifiedByDefault(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode id(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode ignoreGravity(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RelativeLayout) {
          ((RelativeLayout) v).setIgnoreGravity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageBitmap(final Bitmap arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setImageBitmap(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageSwitcher) {
          ((ImageSwitcher) v).setImageDrawable(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setImageDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageLevel(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setImageLevel(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageMatrix(final Matrix arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setImageMatrix(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageResource(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageSwitcher) {
          ((ImageSwitcher) v).setImageResource(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setImageResource(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imageURI(final Uri arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageSwitcher) {
          ((ImageSwitcher) v).setImageURI(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setImageURI(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode imeOptions(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setImeOptions(arg);
        }
        if (v instanceof SearchView) {
          ((SearchView) v).setImeOptions(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode inAnimation(final ObjectAnimator arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setInAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode inAnimation(final Animation arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewAnimator) {
          ((ViewAnimator) v).setInAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode includeFontPadding(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setIncludeFontPadding(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode indeterminate(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setIndeterminate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode indeterminateDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setIndeterminateDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode inflatedId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewStub) {
          ((ViewStub) v).setInflatedId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode initialScale(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setInitialScale(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode inputExtras(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        try {
        	if (v instanceof android.widget.TextView)
        		((android.widget.TextView) v).setInputExtras(arg);
        } catch (org.xmlpull.v1.XmlPullParserException e) {
        	e.printStackTrace();
        } catch (java.io.IOException e) {
        	e.printStackTrace();
        }
      }
    };
  }

  public static Anvil.AttrNode inputType(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setInputType(arg);
        }
        if (v instanceof SearchView) {
          ((SearchView) v).setInputType(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode interpolator(final Interpolator arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setInterpolator(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode is24HourView(final Boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TimePicker) {
          ((TimePicker) v).setIs24HourView(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode isIndicator(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RatingBar) {
          ((RatingBar) v).setIsIndicator(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode isZoomInEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ZoomControls) {
          ((ZoomControls) v).setIsZoomInEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode isZoomOutEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ZoomControls) {
          ((ZoomControls) v).setIsZoomOutEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode itemsCanFocus(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setItemsCanFocus(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode keepScreenOn(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setKeepScreenOn(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode keyListener(final KeyListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setKeyListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode keyProgressIncrement(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsSeekBar) {
          ((AbsSeekBar) v).setKeyProgressIncrement(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode keyboard(final Keyboard arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setKeyboard(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode layoutAnimation(final LayoutAnimationController arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setLayoutAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode layoutAnimationListener(final Animation.AnimationListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setLayoutAnimationListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode layoutParams(final ViewGroup.LayoutParams arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setLayoutParams(arg);
        }
        if (v instanceof WebView) {
          ((WebView) v).setLayoutParams(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode layoutResource(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewStub) {
          ((ViewStub) v).setLayoutResource(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode layoutTransition(final LayoutTransition arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setLayoutTransition(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode left(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setLeft(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode leftStripDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setLeftStripDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode leftStripDrawable(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setLeftStripDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode lettersWatcher(final TextWatcher arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DialerFilter) {
          ((DialerFilter) v).setLettersWatcher(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode lines(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setLines(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode linkTextColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setLinkTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode linkTextColor(final ColorStateList arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setLinkTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode linksClickable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setLinksClickable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode listSelection(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setListSelection(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode longClickable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setLongClickable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode mapTrackballToArrowKeys(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setMapTrackballToArrowKeys(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode marqueeRepeatLimit(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMarqueeRepeatLimit(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode max(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setMax(arg);
        }
        if (v instanceof RatingBar) {
          ((RatingBar) v).setMax(arg);
        }
        if (v instanceof AbsSeekBar) {
          ((AbsSeekBar) v).setMax(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxDate(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CalendarView) {
          ((CalendarView) v).setMaxDate(arg);
        }
        if (v instanceof DatePicker) {
          ((DatePicker) v).setMaxDate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxEms(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMaxEms(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxHeight(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMaxHeight(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setMaxHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxLines(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMaxLines(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxValue(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setMaxValue(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxVisible(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof FragmentBreadCrumbs) {
          ((FragmentBreadCrumbs) v).setMaxVisible(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode maxWidth(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMaxWidth(arg);
        }
        if (v instanceof SearchView) {
          ((SearchView) v).setMaxWidth(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setMaxWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode measureAllChildren(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof FrameLayout) {
          ((FrameLayout) v).setMeasureAllChildren(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode measureWithLargestChildEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setMeasureWithLargestChildEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode mediaController(final MediaController arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof VideoView) {
          ((VideoView) v).setMediaController(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode mediaPlayer(final MediaController.MediaPlayerControl arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof MediaController) {
          ((MediaController) v).setMediaPlayer(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minDate(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CalendarView) {
          ((CalendarView) v).setMinDate(arg);
        }
        if (v instanceof DatePicker) {
          ((DatePicker) v).setMinDate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minEms(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMinEms(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minHeight(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMinHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minLines(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMinLines(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minValue(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setMinValue(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minWidth(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMinWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minimumHeight(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setMinimumHeight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode minimumWidth(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setMinimumWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode mode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DialerFilter) {
          ((DialerFilter) v).setMode(arg);
        }
        if (v instanceof QuickContactBadge) {
          ((QuickContactBadge) v).setMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode motionEventSplittingEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setMotionEventSplittingEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode movementMethod(final MovementMethod arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setMovementMethod(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode multiChoiceModeListener(final AbsListView.MultiChoiceModeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setMultiChoiceModeListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode networkAvailable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setNetworkAvailable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode nextFocusDownId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setNextFocusDownId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode nextFocusForwardId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setNextFocusForwardId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode nextFocusLeftId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setNextFocusLeftId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode nextFocusRightId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setNextFocusRightId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode nextFocusUpId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setNextFocusUpId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode numColumns(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridView) {
          ((GridView) v).setNumColumns(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode numStars(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RatingBar) {
          ((RatingBar) v).setNumStars(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode onBreadCrumbClick(final FragmentBreadCrumbs.OnBreadCrumbClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.app.FragmentBreadCrumbs) {
          ((android.app.FragmentBreadCrumbs) v).setOnBreadCrumbClickListener(new FragmentBreadCrumbs.OnBreadCrumbClickListener() {
            public boolean onBreadCrumbClick(FragmentManager.BackStackEntry a0, int a1) {
              boolean r = arg.onBreadCrumbClick(a0, a1);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onCheckedChange(final RadioGroup.OnCheckedChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.RadioGroup) {
          ((android.widget.RadioGroup) v).setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            public void onCheckedChanged(RadioGroup a0, int a1) {
              arg.onCheckedChanged(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onCheckedChange(final CompoundButton.OnCheckedChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.CompoundButton) {
          ((android.widget.CompoundButton) v).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton a0, boolean a1) {
              arg.onCheckedChanged(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onChildClick(final ExpandableListView.OnChildClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ExpandableListView) {
          ((android.widget.ExpandableListView) v).setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
            public boolean onChildClick(ExpandableListView a0, View a1, int a2, int a3, long a4) {
              boolean r = arg.onChildClick(a0, a1, a2, a3, a4);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onChronometerTick(final Chronometer.OnChronometerTickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.Chronometer) {
          ((android.widget.Chronometer) v).setOnChronometerTickListener(new Chronometer.OnChronometerTickListener() {
            public void onChronometerTick(Chronometer a0) {
              arg.onChronometerTick(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onClick(final View.OnClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.AutoCompleteTextView) {
          ((android.widget.AutoCompleteTextView) v).setOnClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.AdapterView) {
          ((android.widget.AdapterView) v).setOnClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onClose(final SearchView.OnCloseListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SearchView) {
          ((android.widget.SearchView) v).setOnCloseListener(new SearchView.OnCloseListener() {
            public boolean onClose() {
              boolean r = arg.onClose();
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onCompletion(final MediaPlayer.OnCompletionListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.VideoView) {
          ((android.widget.VideoView) v).setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            public void onCompletion(MediaPlayer a0) {
              arg.onCompletion(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onCreateContextMenu(final View.OnCreateContextMenuListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnCreateContextMenuListener(new View.OnCreateContextMenuListener() {
            public void onCreateContextMenu(ContextMenu a0, View a1, ContextMenu.ContextMenuInfo a2) {
              arg.onCreateContextMenu(a0, a1, a2);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onDateChange(final CalendarView.OnDateChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.CalendarView) {
          ((android.widget.CalendarView) v).setOnDateChangeListener(new CalendarView.OnDateChangeListener() {
            public void onSelectedDayChange(CalendarView a0, int a1, int a2, int a3) {
              arg.onSelectedDayChange(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onDrag(final View.OnDragListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnDragListener(new View.OnDragListener() {
            public boolean onDrag(View a0, DragEvent a1) {
              boolean r = arg.onDrag(a0, a1);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onDrawerClose(final SlidingDrawer.OnDrawerCloseListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SlidingDrawer) {
          ((android.widget.SlidingDrawer) v).setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener() {
            public void onDrawerClosed() {
              arg.onDrawerClosed();
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onDrawerOpen(final SlidingDrawer.OnDrawerOpenListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SlidingDrawer) {
          ((android.widget.SlidingDrawer) v).setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener() {
            public void onDrawerOpened() {
              arg.onDrawerOpened();
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onDrawerScroll(final SlidingDrawer.OnDrawerScrollListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SlidingDrawer) {
          ((android.widget.SlidingDrawer) v).setOnDrawerScrollListener(new SlidingDrawer.OnDrawerScrollListener() {
            public void onScrollStarted() {
              arg.onScrollStarted();
              Anvil.render();
            }

            public void onScrollEnded() {
              arg.onScrollEnded();
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onEditorAction(final TextView.OnEditorActionListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.TextView) {
          ((android.widget.TextView) v).setOnEditorActionListener(new TextView.OnEditorActionListener() {
            public boolean onEditorAction(TextView a0, int a1, KeyEvent a2) {
              boolean r = arg.onEditorAction(a0, a1, a2);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onError(final MediaPlayer.OnErrorListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.VideoView) {
          ((android.widget.VideoView) v).setOnErrorListener(new MediaPlayer.OnErrorListener() {
            public boolean onError(MediaPlayer a0, int a1, int a2) {
              boolean r = arg.onError(a0, a1, a2);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onFocusChange(final View.OnFocusChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View a0, boolean a1) {
              arg.onFocusChange(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onGenericMotion(final View.OnGenericMotionListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnGenericMotionListener(new View.OnGenericMotionListener() {
            public boolean onGenericMotion(View a0, MotionEvent a1) {
              boolean r = arg.onGenericMotion(a0, a1);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onGroupClick(final ExpandableListView.OnGroupClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ExpandableListView) {
          ((android.widget.ExpandableListView) v).setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
            public boolean onGroupClick(ExpandableListView a0, View a1, int a2, long a3) {
              boolean r = arg.onGroupClick(a0, a1, a2, a3);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onGroupCollapse(final ExpandableListView.OnGroupCollapseListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ExpandableListView) {
          ((android.widget.ExpandableListView) v).setOnGroupCollapseListener(new ExpandableListView.OnGroupCollapseListener() {
            public void onGroupCollapse(int a0) {
              arg.onGroupCollapse(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onGroupExpand(final ExpandableListView.OnGroupExpandListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ExpandableListView) {
          ((android.widget.ExpandableListView) v).setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() {
            public void onGroupExpand(int a0) {
              arg.onGroupExpand(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onHierarchyChange(final ViewGroup.OnHierarchyChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.TableRow) {
          ((android.widget.TableRow) v).setOnHierarchyChangeListener(new ViewGroup.OnHierarchyChangeListener() {
            public void onChildViewAdded(View a0, View a1) {
              arg.onChildViewAdded(a0, a1);
              Anvil.render();
            }

            public void onChildViewRemoved(View a0, View a1) {
              arg.onChildViewRemoved(a0, a1);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.RadioGroup) {
          ((android.widget.RadioGroup) v).setOnHierarchyChangeListener(new ViewGroup.OnHierarchyChangeListener() {
            public void onChildViewAdded(View a0, View a1) {
              arg.onChildViewAdded(a0, a1);
              Anvil.render();
            }

            public void onChildViewRemoved(View a0, View a1) {
              arg.onChildViewRemoved(a0, a1);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.TableLayout) {
          ((android.widget.TableLayout) v).setOnHierarchyChangeListener(new ViewGroup.OnHierarchyChangeListener() {
            public void onChildViewAdded(View a0, View a1) {
              arg.onChildViewAdded(a0, a1);
              Anvil.render();
            }

            public void onChildViewRemoved(View a0, View a1) {
              arg.onChildViewRemoved(a0, a1);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.view.ViewGroup) {
          ((android.view.ViewGroup) v).setOnHierarchyChangeListener(new ViewGroup.OnHierarchyChangeListener() {
            public void onChildViewAdded(View a0, View a1) {
              arg.onChildViewAdded(a0, a1);
              Anvil.render();
            }

            public void onChildViewRemoved(View a0, View a1) {
              arg.onChildViewRemoved(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onHover(final View.OnHoverListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnHoverListener(new View.OnHoverListener() {
            public boolean onHover(View a0, MotionEvent a1) {
              boolean r = arg.onHover(a0, a1);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onInflate(final ViewStub.OnInflateListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.ViewStub) {
          ((android.view.ViewStub) v).setOnInflateListener(new ViewStub.OnInflateListener() {
            public void onInflate(ViewStub a0, View a1) {
              arg.onInflate(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onItemClick(final AdapterView.OnItemClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.AutoCompleteTextView) {
          ((android.widget.AutoCompleteTextView) v).setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemClick(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.Spinner) {
          ((android.widget.Spinner) v).setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemClick(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.ExpandableListView) {
          ((android.widget.ExpandableListView) v).setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemClick(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.AdapterView) {
          ((android.widget.AdapterView) v).setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemClick(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onItemLongClick(final AdapterView.OnItemLongClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.AdapterView) {
          ((android.widget.AdapterView) v).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            public boolean onItemLongClick(AdapterView a0, View a1, int a2, long a3) {
              boolean r = arg.onItemLongClick(a0, a1, a2, a3);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onItemSelected(final AdapterView.OnItemSelectedListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.AutoCompleteTextView) {
          ((android.widget.AutoCompleteTextView) v).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onNothingSelected(AdapterView a0) {
              arg.onNothingSelected(a0);
              Anvil.render();
            }

            public void onItemSelected(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemSelected(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
        if (v instanceof android.widget.AdapterView) {
          ((android.widget.AdapterView) v).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onNothingSelected(AdapterView a0) {
              arg.onNothingSelected(a0);
              Anvil.render();
            }

            public void onItemSelected(AdapterView a0, View a1, int a2, long a3) {
              arg.onItemSelected(a0, a1, a2, a3);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onKey(final View.OnKeyListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnKeyListener(new View.OnKeyListener() {
            public boolean onKey(View a0, int a1, KeyEvent a2) {
              boolean r = arg.onKey(a0, a1, a2);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onKeyboardAction(final KeyboardView.OnKeyboardActionListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.inputmethodservice.KeyboardView) {
          ((android.inputmethodservice.KeyboardView) v).setOnKeyboardActionListener(new KeyboardView.OnKeyboardActionListener() {
            public void onKey(int a0, int[] a1) {
              arg.onKey(a0, a1);
              Anvil.render();
            }

            public void onText(CharSequence a0) {
              arg.onText(a0);
              Anvil.render();
            }

            public void swipeRight() {
              arg.swipeRight();
              Anvil.render();
            }

            public void swipeLeft() {
              arg.swipeLeft();
              Anvil.render();
            }

            public void swipeUp() {
              arg.swipeUp();
              Anvil.render();
            }

            public void swipeDown() {
              arg.swipeDown();
              Anvil.render();
            }

            public void onPress(int a0) {
              arg.onPress(a0);
              Anvil.render();
            }

            public void onRelease(int a0) {
              arg.onRelease(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onLongClick(final View.OnLongClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnLongClickListener(new View.OnLongClickListener() {
            public boolean onLongClick(View a0) {
              boolean r = arg.onLongClick(a0);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onLongPressUpdateInterval(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setOnLongPressUpdateInterval(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode onPrepared(final MediaPlayer.OnPreparedListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.VideoView) {
          ((android.widget.VideoView) v).setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            public void onPrepared(MediaPlayer a0) {
              arg.onPrepared(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onQueryText(final SearchView.OnQueryTextListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SearchView) {
          ((android.widget.SearchView) v).setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            public boolean onQueryTextSubmit(String a0) {
              boolean r = arg.onQueryTextSubmit(a0);
              Anvil.render();
              return r;
            }

            public boolean onQueryTextChange(String a0) {
              boolean r = arg.onQueryTextChange(a0);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onQueryTextFocusChange(final View.OnFocusChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SearchView) {
          ((android.widget.SearchView) v).setOnQueryTextFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View a0, boolean a1) {
              arg.onFocusChange(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onRatingBarChange(final RatingBar.OnRatingBarChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.RatingBar) {
          ((android.widget.RatingBar) v).setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() {
            public void onRatingChanged(RatingBar a0, float a1, boolean a2) {
              arg.onRatingChanged(a0, a1, a2);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onScroll(final NumberPicker.OnScrollListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.NumberPicker) {
          ((android.widget.NumberPicker) v).setOnScrollListener(new NumberPicker.OnScrollListener() {
            public void onScrollStateChange(NumberPicker a0, int a1) {
              arg.onScrollStateChange(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onScroll(final AbsListView.OnScrollListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.AbsListView) {
          ((android.widget.AbsListView) v).setOnScrollListener(new AbsListView.OnScrollListener() {
            public void onScroll(AbsListView a0, int a1, int a2, int a3) {
              arg.onScroll(a0, a1, a2, a3);
              Anvil.render();
            }

            public void onScrollStateChanged(AbsListView a0, int a1) {
              arg.onScrollStateChanged(a0, a1);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onSearchClick(final View.OnClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SearchView) {
          ((android.widget.SearchView) v).setOnSearchClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onSeekBarChange(final SeekBar.OnSeekBarChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SeekBar) {
          ((android.widget.SeekBar) v).setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            public void onProgressChanged(SeekBar a0, int a1, boolean a2) {
              arg.onProgressChanged(a0, a1, a2);
              Anvil.render();
            }

            public void onStartTrackingTouch(SeekBar a0) {
              arg.onStartTrackingTouch(a0);
              Anvil.render();
            }

            public void onStopTrackingTouch(SeekBar a0) {
              arg.onStopTrackingTouch(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onSuggestion(final SearchView.OnSuggestionListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.SearchView) {
          ((android.widget.SearchView) v).setOnSuggestionListener(new SearchView.OnSuggestionListener() {
            public boolean onSuggestionSelect(int a0) {
              boolean r = arg.onSuggestionSelect(a0);
              Anvil.render();
              return r;
            }

            public boolean onSuggestionClick(int a0) {
              boolean r = arg.onSuggestionClick(a0);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onSystemUiVisibilityChange(final View.OnSystemUiVisibilityChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {
            public void onSystemUiVisibilityChange(int a0) {
              arg.onSystemUiVisibilityChange(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onTabChanged(final TabHost.OnTabChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.TabHost) {
          ((android.widget.TabHost) v).setOnTabChangedListener(new TabHost.OnTabChangeListener() {
            public void onTabChanged(String a0) {
              arg.onTabChanged(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onTimeChanged(final TimePicker.OnTimeChangedListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.TimePicker) {
          ((android.widget.TimePicker) v).setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {
            public void onTimeChanged(TimePicker a0, int a1, int a2) {
              arg.onTimeChanged(a0, a1, a2);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onTouch(final View.OnTouchListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.view.View) {
          ((android.view.View) v).setOnTouchListener(new View.OnTouchListener() {
            public boolean onTouch(View a0, MotionEvent a1) {
              boolean r = arg.onTouch(a0, a1);
              Anvil.render();
              return r;
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onValueChanged(final NumberPicker.OnValueChangeListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.NumberPicker) {
          ((android.widget.NumberPicker) v).setOnValueChangedListener(new NumberPicker.OnValueChangeListener() {
            public void onValueChange(NumberPicker a0, int a1, int a2) {
              arg.onValueChange(a0, a1, a2);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onZoomInClick(final View.OnClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ZoomControls) {
          ((android.widget.ZoomControls) v).setOnZoomInClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode onZoomOutClick(final View.OnClickListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof android.widget.ZoomControls) {
          ((android.widget.ZoomControls) v).setOnZoomOutClickListener(new View.OnClickListener() {
            public void onClick(View a0) {
              arg.onClick(a0);
              Anvil.render();
            }
          });
        }
      }
    };
  }

  public static Anvil.AttrNode opaque(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextureView) {
          ((TextureView) v).setOpaque(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode orientation(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setOrientation(arg);
        }
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setOrientation(arg);
        }
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setOrientation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode outAnimation(final ObjectAnimator arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setOutAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode outAnimation(final Animation arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewAnimator) {
          ((ViewAnimator) v).setOutAnimation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode overScrollMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof HorizontalScrollView) {
          ((HorizontalScrollView) v).setOverScrollMode(arg);
        }
        if (v instanceof AbsListView) {
          ((AbsListView) v).setOverScrollMode(arg);
        }
        if (v instanceof ScrollView) {
          ((ScrollView) v).setOverScrollMode(arg);
        }
        if (v instanceof View) {
          ((View) v).setOverScrollMode(arg);
        }
        if (v instanceof WebView) {
          ((WebView) v).setOverScrollMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode overscrollFooter(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setOverscrollFooter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode overscrollHeader(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setOverscrollHeader(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode paintFlags(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setPaintFlags(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode persistentDrawingCache(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ViewGroup) {
          ((ViewGroup) v).setPersistentDrawingCache(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode pictureListener(final WebView.PictureListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setPictureListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode pivotX(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setPivotX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode pivotY(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setPivotY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode popupParent(final View arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setPopupParent(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode preserveEGLContextOnPause(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setPreserveEGLContextOnPause(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode pressed(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setPressed(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode previewEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setPreviewEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode privateImeOptions(final String arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setPrivateImeOptions(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode progress(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setProgress(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode progressDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setProgressDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode prompt(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Spinner) {
          ((Spinner) v).setPrompt(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode promptId(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Spinner) {
          ((Spinner) v).setPromptId(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode proximityCorrectionEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setProximityCorrectionEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode queryHint(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setQueryHint(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode queryRefinementEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setQueryRefinementEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rating(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RatingBar) {
          ((RatingBar) v).setRating(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rawInputType(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setRawInputType(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode recyclerListener(final AbsListView.RecyclerListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setRecyclerListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode remoteViewsAdapter(final Intent arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ListView) {
          ((ListView) v).setRemoteViewsAdapter(arg);
        }
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setRemoteViewsAdapter(arg);
        }
        if (v instanceof GridView) {
          ((GridView) v).setRemoteViewsAdapter(arg);
        }
        if (v instanceof AbsListView) {
          ((AbsListView) v).setRemoteViewsAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode renderMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setRenderMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode renderer(final GLSurfaceView.Renderer arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GLSurfaceView) {
          ((GLSurfaceView) v).setRenderer(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode right(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setRight(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rightStripDrawable(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setRightStripDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rightStripDrawable(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setRightStripDrawable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rotation(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setRotation(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rotationX(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setRotationX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rotationY(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setRotationY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rowCount(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setRowCount(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode rowOrderPreserved(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setRowOrderPreserved(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode saveEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setSaveEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode saveFromParentEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setSaveFromParentEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scaleType(final ImageView.ScaleType arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ImageView) {
          ((ImageView) v).setScaleType(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scaleX(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScaleX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scaleY(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScaleY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollBarStyle(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScrollBarStyle(arg);
        }
        if (v instanceof WebView) {
          ((WebView) v).setScrollBarStyle(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollContainer(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScrollContainer(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollX(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScrollX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollY(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScrollY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollbarFadingEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setScrollbarFadingEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scroller(final Scroller arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setScroller(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode scrollingCacheEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setScrollingCacheEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode searchableInfo(final SearchableInfo arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setSearchableInfo(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode secondaryProgress(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setSecondaryProgress(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selectAllOnFocus(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setSelectAllOnFocus(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selected(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setSelected(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setSelected(arg);
        }
        if (v instanceof View) {
          ((View) v).setSelected(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selectedGroup(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ExpandableListView) {
          ((ExpandableListView) v).setSelectedGroup(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selection(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof EditText) {
          ((EditText) v).setSelection(arg);
        }
        if (v instanceof ListView) {
          ((ListView) v).setSelection(arg);
        }
        if (v instanceof AbsSpinner) {
          ((AbsSpinner) v).setSelection(arg);
        }
        if (v instanceof AdapterViewAnimator) {
          ((AdapterViewAnimator) v).setSelection(arg);
        }
        if (v instanceof GridView) {
          ((GridView) v).setSelection(arg);
        }
        if (v instanceof AdapterView) {
          ((AdapterView) v).setSelection(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selector(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setSelector(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode selector(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setSelector(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode shifted(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setShifted(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode showDividers(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setShowDividers(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode showWeekNumber(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof CalendarView) {
          ((CalendarView) v).setShowWeekNumber(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode shrinkAllColumns(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TableLayout) {
          ((TableLayout) v).setShrinkAllColumns(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode singleLine(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setSingleLine(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode smoothScrollbarEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setSmoothScrollbarEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode smoothScrollingEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof HorizontalScrollView) {
          ((HorizontalScrollView) v).setSmoothScrollingEnabled(arg);
        }
        if (v instanceof ScrollView) {
          ((ScrollView) v).setSmoothScrollingEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode soundEffectsEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setSoundEffectsEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode spacing(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Gallery) {
          ((Gallery) v).setSpacing(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode spannableFactory(final Spannable.Factory arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setSpannableFactory(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode spinnersShown(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof DatePicker) {
          ((DatePicker) v).setSpinnersShown(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode stackFromBottom(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setStackFromBottom(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode stepSize(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RatingBar) {
          ((RatingBar) v).setStepSize(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode stretchAllColumns(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TableLayout) {
          ((TableLayout) v).setStretchAllColumns(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode stretchMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridView) {
          ((GridView) v).setStretchMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode stripEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabWidget) {
          ((TabWidget) v).setStripEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode submitButtonEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setSubmitButtonEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode suggestionsAdapter(final CursorAdapter arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SearchView) {
          ((SearchView) v).setSuggestionsAdapter(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode surfaceTextureListener(final TextureView.SurfaceTextureListener arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextureView) {
          ((TextureView) v).setSurfaceTextureListener(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode switchTypeface(final Typeface arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Switch) {
          ((Switch) v).setSwitchTypeface(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode systemUiVisibility(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setSystemUiVisibility(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode tag(final Object arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setTag(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode text(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode text(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setText(arg);
        }
        if (v instanceof TextSwitcher) {
          ((TextSwitcher) v).setText(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textColor(final ColorStateList arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textFilterEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setTextFilterEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textIsSelectable(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextIsSelectable(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textKeepState(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextKeepState(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textOff(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Switch) {
          ((Switch) v).setTextOff(arg);
        }
        if (v instanceof ToggleButton) {
          ((ToggleButton) v).setTextOff(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textOn(final CharSequence arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Switch) {
          ((Switch) v).setTextOn(arg);
        }
        if (v instanceof ToggleButton) {
          ((ToggleButton) v).setTextOn(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textScaleX(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextScaleX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode textSize(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTextSize(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode threshold(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setThreshold(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode thumb(final Drawable arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsSeekBar) {
          ((AbsSeekBar) v).setThumb(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode thumbOffset(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsSeekBar) {
          ((AbsSeekBar) v).setThumbOffset(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode tokenizer(final MultiAutoCompleteTextView.Tokenizer arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof MultiAutoCompleteTextView) {
          ((MultiAutoCompleteTextView) v).setTokenizer(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode top(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setTop(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode touchDelegate(final TouchDelegate arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setTouchDelegate(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode transcriptMode(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setTranscriptMode(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode transform(final Matrix arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextureView) {
          ((TextureView) v).setTransform(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode transformationMethod(final TransformationMethod arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTransformationMethod(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode translationX(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setTranslationX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode translationY(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setTranslationY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode typeface(final Typeface arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setTypeface(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode uncertainGestureColor(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GestureOverlayView) {
          ((GestureOverlayView) v).setUncertainGestureColor(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode unselectedAlpha(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof Gallery) {
          ((Gallery) v).setUnselectedAlpha(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode up(final LocalActivityManager arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TabHost) {
          ((TabHost) v).setup(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode useDefaultMargins(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridLayout) {
          ((GridLayout) v).setUseDefaultMargins(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode validator(final AutoCompleteTextView.Validator arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AutoCompleteTextView) {
          ((AutoCompleteTextView) v).setValidator(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode value(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setValue(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode velocityScale(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setVelocityScale(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalCorrection(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof KeyboardView) {
          ((KeyboardView) v).setVerticalCorrection(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalFadingEdgeEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setVerticalFadingEdgeEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalGravity(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof RelativeLayout) {
          ((RelativeLayout) v).setVerticalGravity(arg);
        }
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setVerticalGravity(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalScrollBarEnabled(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setVerticalScrollBarEnabled(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalScrollbarOverlay(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setVerticalScrollbarOverlay(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalScrollbarPosition(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof AbsListView) {
          ((AbsListView) v).setVerticalScrollbarPosition(arg);
        }
        if (v instanceof View) {
          ((View) v).setVerticalScrollbarPosition(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode verticalSpacing(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof GridView) {
          ((GridView) v).setVerticalSpacing(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode videoPath(final String arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof VideoView) {
          ((VideoView) v).setVideoPath(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode videoURI(final Uri arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof VideoView) {
          ((VideoView) v).setVideoURI(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode visibility(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ProgressBar) {
          ((ProgressBar) v).setVisibility(arg);
        }
        if (v instanceof ImageView) {
          ((ImageView) v).setVisibility(arg);
        }
        if (v instanceof SurfaceView) {
          ((SurfaceView) v).setVisibility(arg);
        }
        if (v instanceof ViewStub) {
          ((ViewStub) v).setVisibility(arg);
        }
        if (v instanceof View) {
          ((View) v).setVisibility(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode webChromeClient(final WebChromeClient arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setWebChromeClient(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode webViewClient(final WebViewClient arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof WebView) {
          ((WebView) v).setWebViewClient(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode weightSum(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof LinearLayout) {
          ((LinearLayout) v).setWeightSum(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode width(final int arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof TextView) {
          ((TextView) v).setWidth(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode willNotCacheDrawing(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setWillNotCacheDrawing(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode willNotDraw(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setWillNotDraw(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode wrapSelectorWheel(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof NumberPicker) {
          ((NumberPicker) v).setWrapSelectorWheel(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode x(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setX(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode y(final float arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof View) {
          ((View) v).setY(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode zOrderMediaOverlay(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SurfaceView) {
          ((SurfaceView) v).setZOrderMediaOverlay(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode zOrderOnTop(final boolean arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof SurfaceView) {
          ((SurfaceView) v).setZOrderOnTop(arg);
        }
      }
    };
  }

  public static Anvil.AttrNode zoomSpeed(final long arg) {
    return new Anvil.SimpleAttrNode(arg) {
      public void apply(View v) {
        if (v instanceof ZoomButton) {
          ((ZoomButton) v).setZoomSpeed(arg);
        }
        if (v instanceof ZoomControls) {
          ((ZoomControls) v).setZoomSpeed(arg);
        }
      }
    };
  }
}
