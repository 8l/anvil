buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:1.0.0'
	}
}

apply plugin: 'android-library'

android {
	compileSdkVersion 'android-21'
	buildToolsVersion '21.1.2'

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	defaultConfig {
		versionCode 1
		versionName "0.0.1"
		minSdkVersion 4
		targetSdkVersion 21
	}
}

//
// Publishing
//
apply from: 'maven-push.gradle'

//
// Code generation for property setters
//
task generateProps(type: GeneratorTask)

class GeneratorTask extends DefaultTask {
	def apiLevels = [4, 10, 15, 21]
	def propsDir = "props"

	@TaskAction
	generate() {
		for (api in apiLevels) {
			def input = new File("${propsDir}/Props.java")
			def output = new File("src/main/java/trikita/anvil/v${api}/Props.java")
			output.parentFile.mkdirs()

			output.write(input.text
				.replaceAll('^package .*\n',
					"// This file is generated by 'gradle generateProps'\n" +
					"package trikita.anvil.v${api};\n")
				.replaceAll('(?m)^}', generateFromJar(getAndroidJar(api)) + "}"))
		}
	}

	@groovy.transform.EqualsAndHashCode
	class MethodKey {
		String method
		Class cls
		MethodKey(m, c) {
			method = m
			cls = c
		}
	}

	def getAndroidJar(api) {
		def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
		def sdkDir = ""
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr -> properties.load(instr) }
        sdkDir = properties.getProperty('sdk.dir')
		}
		return new File(sdkDir + "/platforms/android-" + api + "/android.jar")
	}

	def methods = [:]

	def generateFromJar(jarFile) {
		methods = [:]
		def jar = new java.util.jar.JarFile(jarFile)
		def url = new java.net.URL("jar", "","file:" + jarFile.getAbsolutePath() +"!/")
		def loader = new java.net.URLClassLoader([url] as java.net.URL[], getClass().getClassLoader())
		def viewClass = loader.loadClass("android.view.View")

    for (e in Collections.list(jar.entries())) {
			if (e.getName().endsWith(".class")) {
				def className = e.getName().replace(".class", "").replace("/", ".")
				if (className.contains('$')) {
					// Skip inner classes
					continue;
				}
				def c = loader.loadClass(className);
				if (viewClass.isAssignableFrom(c)) {
					generateFromClass(c)
				}
			}
		}
		def s = ""
		methods.sort { it.key.method }.each {
			def name = it.key.method
			def param = it.key.cls
			def output = ""
			for (gen in it.value) {
				output = output + gen(param)
			}
			if (output.length() > 0) {
				s += ("  public static AttrNode ${name}(final ${param.getCanonicalName()} arg) {\n")
				s += ("    return new SimpleAttrNode(arg) {\n")
				s += ("      public void apply(View v) {\n")
				s += ("        ${output.replace("\n", "\n        ").replaceAll(/\s*$/, '')}\n")
				s += ("      }\n")
				s += ("    };\n")
				s += ("  }\n")
			}
		}
		return s
	}

	def generateFromClass(c) {
		for (m in c.getDeclaredMethods()) {
			if (!java.lang.reflect.Modifier.isPublic(m.getModifiers()) || m.isSynthetic() || m.isBridge()) {
				continue
			}
			def f, key
			if (m.getName().matches('^setOn.*Listener$')) {
				def name = m.getName()
				name = name.substring(5, name.length() - 8)
				key = new MethodKey("on"+name, m.getParameterTypes()[0]);
				f = listener(m)
			} else if (m.getName().startsWith('set') && m.getParameterCount() == 1) {
				def name = Character.toLowerCase(m.getName().charAt(3)).toString() + m.getName().substring(4)
				key = new MethodKey(name, m.getParameterTypes()[0]);
				f = setter(m)
			} else {
				continue
			}
			if (methods.containsKey(key) == false) {
				methods.put(key, [])
			}
			methods.get(key).add(f)
		}
	}

	def listener(m) {
		return { paramType ->
			def out = ""
			def className = m.getDeclaringClass().getCanonicalName()
			out += "if (v instanceof ${className}) {\n"
			out += "  ((${className}) v).${m.getName()}(new ${paramType.getCanonicalName()}() {\n"
			paramType.getDeclaredMethods().each { lm ->
				def args = ""
				def vars = ""
				lm.getParameterTypes().eachWithIndex { v, i ->
					args += (i != 0 ? ", " : "") + "${v.getCanonicalName()} a${i}"
					vars += (i != 0 ? ", " : "") + "a${i}"
				}
				def returnClass = lm.getReturnType().getCanonicalName()
				out += "    public ${returnClass} ${lm.getName()}(${args}) {\n"
				if (returnClass != "void") {
					out += ("      ${returnClass} r = arg.${lm.getName()}(${vars});\n")
					out += ("      render();\n");
					out += ("      return r;\n");
				} else {
					out += ("      arg.${lm.getName()}(${vars});\n");
					out += ("      render();\n");
				}
				out +=   ("    }\n");
			}
			out +=     (" });\n");
			out +=     ("}\n");
		}
	}

	def setter(m) {
		return { paramType ->
			def out = ""
			def className = m.getDeclaringClass().getCanonicalName();
			def f = new File("${propsDir}/${className}__${m.getName()}__${paramType.getCanonicalName()}")
			if (f.exists()) {
				try {
					out = new Scanner(f).useDelimiter("\\A").next();
				} catch (NoSuchElementException ex) {
					// Ignore if text file is empty
				}
			} else {
				out = "if (v instanceof ${className}) {\n" +
				      "  ((${className}) v).${m.getName()}(arg);\n" +
				      "}\n";
			}
			return out
		}
	}
}
